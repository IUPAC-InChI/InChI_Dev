Original v 1.04 
uses:
nRet3 = GetStructFromINCHI( &inpInchi, &outStructure );
/*            e_bEnableCmdlineOption( szInchiCmdLine, "Inchi2Struct", 0 );*/
            
            FreeINCHI( pOut ); /* we do not need the original InChI anymore */
            
            if ( nRet3 == inchi_Ret_OKAY || nRet3 == inchi_Ret_WARNING ) {
            ....
            } else {
                /* error: Could not create Structure */
                inchi_ios_eprint( log_stream, "GetStructFromINCHI failed (%s)(%-d) %s\n", outStructure.szMessage? outStructure.szMessage:"???", nRet3, pStrLogId );
            }
            FreeStructFromINCHI( &outStructure );

and GetStructFromINCHI() in v 1.04 may return:
	inchi_Ret_BUSY	5
	inchi_Ret_ERROR	2
	inchi_Ret_FATAL	3
	inchi_Ret_EOF	-1
	inchi_Ret_OKAY	0

	(inchi_api.h also defines
	inchi_Ret_UNKNOWN =  4
	inchi_Ret_WARNING =  1
	inchi_Ret_OKAY    =  0
	inchi_Ret_BREAK   = -100,
    inchi_Ret_SKIP    = -2)

NOTE THAT ichierr.h defines
	_IS_OKAY    0
	_IS_WARNING 1
	_IS_ERROR   2  
	_IS_FATAL   3
	_IS_UNKNOWN 4
	_IS_EOF    -1    
	_IS_SKIP   -2


GetStructFromINCHI() internally produces various own error codes (typically called 'nRet', 'nRet1'), as well as gets retcodes from
other functions; typically they are 
	something < 0 	typically means error
 	_IS_ERROR
 	_IS_FATAL
 	_IS_EOF

GetStructFromINCHI() at the end translates intermediate retcodes as follows:

	-3 and -2 (this last may have been _IS_SKIP)
		both translate to 	
			inchi_Ret_ERROR  (which is 2)
	-1  (which may have been _IS_EOF) to 
			inchi_Ret_FATAL  (which is 3)

	then struct check may emit 
			inchi_Ret_EOF
	then check for warnings may emit
			inchi_Ret_WARNING 
	otherwise emitted is
			inchi_Ret_OKAY;

Brrrrrr....
It seems to me that _IS_ERROR or _IS_FATAL transferred to nRet must be amazingly translated to either inchi_Ret_WARNING or inchi_Ret_OKAY??!!!
WTF???????

also stuff with INCHI_VALID_NON_STANDARD seems unsafe!!



may return:
_IS_ERROR