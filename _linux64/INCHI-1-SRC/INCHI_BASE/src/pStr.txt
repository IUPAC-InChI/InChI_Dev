int PrintXmlStartTag( char *pStr, 
int str_LineStart( const char *tag, char *tag2, int val2, char *pStr, int ind );
                 int *bOverflow, char *pStr, int ind, int bPlainTextTags );
int PrintXmlStartTag(char *pStr, int indent, int bEnd, const char *tag,
        len += sprintf( pStr+len, "%s<%s", SP(indent), tag);
        len += sprintf( pStr+len, " %s=\"%d\"", l1, v1);
        len += sprintf( pStr+len, " %s=\"%d\"", l2, v2);
        len += sprintf( pStr+len, " %s=\"%d\"", l3, v3);
        len += sprintf( pStr+len, " %s=\"%d\"", l4, v4);
        len += sprintf( pStr+len, " %s=\"%d\"", l5, v5);
        len += sprintf( pStr+len, " %s=\"%d\"", l6, v6);
        len += sprintf( pStr+len, "%s%s", (bEnd & 1)?"/":"", (bEnd & 2)?">":"");
    char pStr[128];
    sprintf( pStr, "<%s %s=\"%s\">", x_inchi, x_inchi_ver, x_curr_ver );
    inchi_ios_print_nodisplay( out_file, "%s\n", pStr );
    char pStr[128];
    sprintf( pStr, "</%s>", x_inchi );
    inchi_ios_print_nodisplay( out_file, "%s\n", pStr );
int OutputINChIXmlStructStartTag( INCHI_IOSTREAM *out_file, char *pStr, int ind /* indent*/, 
        tot_len += sprintf(pStr+tot_len, "%s<%s", SP(ind), x_structure);
        tot_len += sprintf(pStr+tot_len, ">" );
        inchi_ios_print( out_file, "%s\n", pStr );
        tot_len += sprintf(pStr+tot_len, "%s<%s", SP(ind), x_structure);
            tot_len += sprintf(pStr+tot_len, " %s=\"%d\"", x_number, num_input_struct);
        tot_len += sprintf(pStr+tot_len, ">" );
        inchi_ios_print( out_file, "%s\n", pStr );
            tot_len += sprintf(pStr+tot_len, "%s<%s", SP(ind), x_structure);
            tot_len += sprintf(pStr+tot_len, " %s=\"%d\"", x_number, num_input_struct);
                tot_len += sprintf(pStr+tot_len, " %s=\"%s\"", x_header, szSdfLabel? szSdfLabel:x_empty);
                tot_len += sprintf(pStr+tot_len, " %s=\"%s\"", x_value, szSdfValue? szSdfValue:x_empty);
            tot_len += sprintf(pStr+tot_len, ">" );
            inchi_ios_print( out_file, "%s\n", pStr );
int OutputINChIXmlStructEndTag( INCHI_IOSTREAM *out_file, char *pStr, int nStrLen, int ind )
    if ( out_file && pStr ) 
            sprintf(pStr, "%s</%s>", SP(ind), x_structure);
            inchi_ios_print( out_file, "%s\n", pStr );
int OutputINChIXmlError( INCHI_IOSTREAM *out_file, char *pStr, int nStrLen, 
        sprintf( pStr, "%s<%s %s=\"%s\" %s=\"%d\" %s=\"%s\"/>", 
        sprintf( pStr, "%s<%s %s=\"%s\" %s=\"%s\"/>", 
        inchi_ios_print( out_file, "%s\n", pStr );
						   char *pStr, 
        sprintf( pStr, "%s: %s=\"%s\" %s=\"%s\"", 
        inchi_ios_print( out_file, "%s\n", pStr );
				  char *pStr, 
								 pStr, 
				  char *pStr, 
    if ( !pStr ) 
        tot_len = sprintf(pStr, "%s<%s %s=\"%s\"",
            tot_len += sprintf(pStr+tot_len, " %s=\"%d\"", x_reconnected, iINChI );
            tot_len += sprintf(pStr+tot_len, " %s=\"%s%s%s\"", x_type, pNumber, pDelim, pCtType);
        sprintf(pStr+tot_len,">");
        inchi_ios_print( out_file, "%s\n", pStr );
                tot_len = sprintf( pStr, "%sStructure: %d", pLF, num_input_struct );
                qq = inchi_ios_print( out_file, "%s%s", pStr, pTAB );
                tot_len = sprintf( pStr, "%sStructure: %d.%s%s%s%s",
                    tot_len += sprintf( pStr + tot_len, ":%ld", lSdfId );
                inchi_ios_print( out_file, "%s%s", pStr, pTAB );
        tot_len = str_LineStart( szTag1, NULL, 0, pStr, ind );
        tot_len += sprintf(pStr + tot_len, "%s", x_curr_ver);
            tot_len += sprintf(pStr + tot_len, "S");
            if ( str_LineEnd( szTag1, tot_len, nStrLen, &bOverflow, pStr, bXml? 0 : -1, bPlainTextTags ) )
        inchi_ios_print( out_file, "%s%s", pStr, pLF );
        tot_len = str_LineStart( szTag1, NULL, 0, pStr, ind );
        tot_len = str_HillFormula(pINChISort, pStr, nStrLen, tot_len,
        if ( str_LineEnd( szTag1, tot_len, nStrLen, &bOverflow, pStr, bXml? 0 : -1, 1 ) )
        inchi_ios_print( out_file, "%s%s", pStr, pLF );
    tot_len  = str_LineStart( szTag1, NULL, 0, pStr, ind );
    tot_len2 = str_Connections(pCG, pINChISort, pStr, nStrLen, tot_len,
        if ( str_LineEnd( szTag1, tot_len, nStrLen, &bOverflow, pStr, bXml? 0 : -2, bPlainTextTags ) )
            goto exit_function; /* pStr overfow */
        inchi_ios_print( out_file, "%s%s", pStr, pLF );
        tot_len  = str_LineStart( szTag1, NULL, 0, pStr, ind );
        tot_len2 = str_H_atoms(pINChISort, pStr, nStrLen, tot_len,
            if ( str_LineEnd( szTag1, tot_len, nStrLen, &bOverflow, pStr, bXml? 0 : -2, 1 ) )
            inchi_ios_print( out_file, "%s%s", pStr, pLF );
        tot_len = str_LineStart( szTag1, NULL, 0, pStr, ind );
            tot_len = str_Charge2(pINChISort, pINChISort2, pStr, nStrLen, tot_len,
        if ( str_LineEnd( szTag1, tot_len, nStrLen, &bOverflow, pStr, bXml? 0 : -nSegmAction, bPlainTextTags ) )
        inchi_ios_print( out_file, "%s%s", pStr, pLF );
            tot_len = str_LineStart( szTag1, NULL, 0, pStr, ind );
            tot_len += sprintf( pStr + tot_len, "%+d", nNumRemovedProtons );
            if ( str_LineEnd( szTag1, tot_len, nStrLen, &bOverflow, pStr, bXml? 0 : -nSegmAction, bPlainTextTags ) )
            inchi_ios_print( out_file, "%s%s", pStr, pLF );
            str_LineStart( szTag1, NULL, 0, pStr, ind );
            inchi_ios_print( out_file, "%s\n", pStr );
            tot_len = str_LineStart( szTag2, NULL, 0, pStr, ind );
                tot_len = str_Sp2(pINChISort, pINChISort2, pStr, nStrLen, tot_len,
            if ( str_LineEnd( szTag2, tot_len, nStrLen, &bOverflow, pStr, bXml? 0 : -nSegmAction, bPlainTextTags ) )
            inchi_ios_print( out_file, "%s%s", pStr, pLF );
            tot_len = str_LineStart( szTag2, NULL, 0, pStr, ind );
                tot_len = str_Sp3(pINChISort, pINChISort2, pStr, nStrLen, tot_len,
            if (str_LineEnd( szTag2, tot_len, nStrLen, &bOverflow, pStr, bXml? 0 : -nSegmAction, bPlainTextTags ))
            inchi_ios_print( out_file, "%s%s", pStr, pLF );
            tot_len = str_LineStart( szTag2, NULL, 0, pStr, ind );
                tot_len = str_StereoAbsInv(pINChISort, pStr, nStrLen, tot_len,
            if (str_LineEnd( szTag2, tot_len, nStrLen, &bOverflow, pStr, bXml? 0 : -nSegmAction, bPlainTextTags ))
            inchi_ios_print( out_file, "%s%s", pStr, pLF );
            tot_len = str_LineStart( szTag2, NULL, 0, pStr, ind );
                tot_len += MakeDelim( p_stereo, pStr + tot_len, nStrLen-tot_len, &bOverflow);
            if (str_LineEnd( szTag2, tot_len, nStrLen, &bOverflow, pStr, bXml? 0 : -nSegmAction, bPlainTextTags ))
            inchi_ios_print( out_file, "%s%s", pStr, pLF );
            if ( str_LineEnd( szTag1, 0, nStrLen, &bOverflow, pStr, ind, bPlainTextTags ) )
            inchi_ios_print( out_file, "%s", pStr );
            str_LineStart( szTag1, NULL, 0, pStr, ind );
            inchi_ios_print( out_file, "%s\n", pStr );
            tot_len = str_LineStart( szTag2, NULL, 0, pStr, ind );
                tot_len2 = str_IsoAtoms(pINChISort, pINChISort2, pStr, nStrLen, tot_len,
            if ( str_LineEnd( szTag2, tot_len, nStrLen, &bOverflow, pStr, bXml? 0 : -nSegmAction, bPlainTextTags ) )
            inchi_ios_print( out_file, "%s%s", pStr, pLF );
            tot_len = str_LineStart( szTag2, NULL, 0, pStr, ind );
            tot_len += MakeIsoHString( num_iso_H, pStr + tot_len, nStrLen-tot_len, TAUT_MODE, &bOverflow);
            if ( str_LineEnd( szTag2, tot_len, nStrLen, &bOverflow, pStr, bXml? 0 : -nSegmAction, bPlainTextTags ) )
            inchi_ios_print( out_file, "%s%s", pStr, pLF );
                str_LineStart( szTag2, NULL, 0, pStr, ind );
                inchi_ios_print( out_file, "%s\n", pStr );
                tot_len = str_LineStart( szTag3, NULL, 0, pStr, ind );
                    tot_len = str_IsoSp2(pINChISort, pINChISort2, pStr, nStrLen, tot_len,
                if ( str_LineEnd( szTag3, tot_len, nStrLen, &bOverflow, pStr, bXml? 0 : -nSegmAction, bPlainTextTags ) )
                inchi_ios_print( out_file, "%s%s", pStr, pLF );
                tot_len = str_LineStart( szTag3, NULL, 0, pStr, ind );
                    tot_len = str_IsoSp3(pINChISort, pINChISort2, pStr, nStrLen, tot_len,
                if ( str_LineEnd( szTag3, tot_len, nStrLen, &bOverflow, pStr, bXml? 0 : -nSegmAction, bPlainTextTags ) )
                inchi_ios_print( out_file, "%s%s", pStr, pLF );
                tot_len = str_LineStart( szTag3, NULL, 0, pStr, ind );
                    tot_len = str_IsoStereoAbsInv(pINChISort, pStr, nStrLen, tot_len,
                if ( str_LineEnd( szTag3, tot_len, nStrLen, &bOverflow, pStr, bXml? 0 : -nSegmAction, bPlainTextTags ) )
                inchi_ios_print( out_file, "%s%s", pStr, pLF );
                tot_len = str_LineStart( szTag3, NULL, 0, pStr, ind );
                    tot_len += MakeDelim( p_stereo, pStr + tot_len, nStrLen-tot_len, &bOverflow);
                if ( str_LineEnd( szTag3, tot_len, nStrLen, &bOverflow, pStr, bXml? 0 : -nSegmAction, bPlainTextTags ) )
                inchi_ios_print( out_file, "%s%s", pStr, pLF );
                if ( str_LineEnd( szTag2, 0, nStrLen, &bOverflow, pStr, ind, bPlainTextTags ) )
                inchi_ios_print( out_file, "%s", pStr );
            if ( str_LineEnd( szTag1, 0, nStrLen, &bOverflow, pStr, ind, bPlainTextTags ) )
            inchi_ios_print( out_file, "%s", pStr );
            tot_len = str_LineStart( szTag1, NULL, 0, pStr, ind );
            tot_len = str_AuxTautTrans(pCG, nTrans_n, nTrans_s, pStr, nStrLen, tot_len,
            if ( str_LineEnd( szTag1, tot_len, nStrLen, &bOverflow, pStr, bXml? 0 : -1, bPlainTextTags ) )
            inchi_ios_print( out_file, "%s%s", pStr, pLF );
            str_LineStart( szTag1, NULL, 0, pStr, ind );
            inchi_ios_print( out_file, "%s\n", pStr );
        tot_len = str_LineStart( szTag1, NULL, 0, pStr, ind );
            tot_len2 = str_HillFormula2(pINChISort, pINChISort2, pStr, nStrLen, tot_len,
        if ( str_LineEnd( szTag1, tot_len, nStrLen, &bOverflow, pStr, bXml? 0 : -nSegmAction, bPlainTextTags ) )
        inchi_ios_print( out_file, "%s%s", pStr, pLF );
            tot_len = str_LineStart( szTag1, NULL, 0, pStr, ind ); /* open H-fixed */
            tot_len2 = str_FixedH_atoms(pINChISort, pStr, nStrLen, tot_len,
            if ( str_LineEnd( szTag1, tot_len, nStrLen, &bOverflow, pStr, bXml? 0 : -nSegmAction, bPlainTextTags ) )
            inchi_ios_print( out_file, "%s%s", pStr, pLF );
                if ( str_LineEnd( szTag1, 0, nStrLen, &bOverflow, pStr, ind, bPlainTextTags ) )
                inchi_ios_print( out_file, "%s", pStr );
        nRet = OutputINChI1( pCG, pStr, nStrLen, 
        if ( str_LineEnd( x_basic, 0, nStrLen, &bOverflow, pStr, ind, bPlainTextTags ) )
        inchi_ios_print( out_file, "%s", pStr );
            tot_len = sprintf(pStr, "%s<%s %s=\"%s\"",
                tot_len += sprintf(pStr+tot_len, " %s=\"%d\"", x_reconnected, iINChI );
                tot_len += sprintf(pStr+tot_len, " %s=\"%s\"", x_type, pNumber);
            sprintf(pStr+tot_len,">");
            inchi_ios_print( out_file, "%s\n", pStr );
                tot_len = sprintf( pStr, "%s<%s>", SP(ind), x_aux_comm );
                inchi_ios_print( out_file, "%s\n", pStr );
                tot_len = sprintf( pStr, "AuxInfo=" ); /* in wINChI window, separate INChI: from AuxInfo: with blank line */
                                          pStr,
                tot_len = str_LineStart( szTag1, NULL, 0, pStr, ind );
                tot_len += sprintf(pStr + tot_len, "%s", x_curr_ver);
                if ( str_LineEnd( szTag1, tot_len, nStrLen, &bOverflow, pStr, bXml? 0 : -1, bPlainTextTags ) )
                inchi_ios_print( out_file, "%s%s", pStr, pLF );
            tot_len = str_LineStart( szTag1, NULL, 0, pStr, ind );
            tot_len += sprintf( pStr + tot_len, "%d", (bTautomeric && bTautomericOutputAllowed)? bTautomeric : 0); 
            if ( str_LineEnd( szTag1, tot_len, nStrLen, &bOverflow, pStr, bXml? 0 : -1, bPlainTextTags ) )
            inchi_ios_print( out_file, "%s%s", pStr, pLF );
            tot_len = str_LineStart( szTag1, NULL, 0, pStr, ind );
            tot_len = str_AuxNumb(pCG, pINChISort, pINChISort2, pStr, nStrLen, tot_len,
            if ( str_LineEnd( szTag1, tot_len, nStrLen, &bOverflow, pStr, bXml? 0 : -1, bPlainTextTags ) )
            inchi_ios_print( out_file, "%s%s", pStr, pLF );
            tot_len = str_LineStart( szTag1, NULL, 0, pStr, ind );
            tot_len = str_AuxEqu(pINChISort, pINChISort2, pStr, nStrLen, tot_len,
            if ( str_LineEnd( szTag1, tot_len, nStrLen, &bOverflow, pStr, bXml? 0 : -1, bPlainTextTags ) )
            inchi_ios_print( out_file, "%s%s", pStr, pLF );
            tot_len = str_LineStart( szTag1, NULL, 0, pStr, ind );
            tot_len = str_AuxTgroupEqu(pINChISort, pStr, nStrLen, tot_len,
            if ( str_LineEnd( szTag1, tot_len, nStrLen, &bOverflow, pStr, bXml? 0 : -1, bPlainTextTags ) )
            inchi_ios_print( out_file, "%s", pStr );
                str_LineStart( szTag1, NULL, 0, pStr, ind );
                inchi_ios_print( out_file, "%s\n", pStr );
            tot_len = str_LineStart( szTag2, NULL, 0, pStr, ind );
            tot_len = str_AuxInvSp3(pINChISort, pINChISort2, pStr, nStrLen, tot_len,
            if ( str_LineEnd( szTag2, tot_len, nStrLen, &bOverflow, pStr, bXml? 0 : -1, bPlainTextTags ) )
            inchi_ios_print( out_file, "%s%s", pStr, pLF );
                tot_len = str_LineStart( szTag2, NULL, 0, pStr, ind );
                tot_len = str_AuxInvSp3Numb(pCG, pINChISort, pINChISort2, pStr, nStrLen, tot_len,
                if ( str_LineEnd( szTag2, tot_len, nStrLen, &bOverflow, pStr, bXml? 0 : -1, bPlainTextTags ) )
                inchi_ios_print( out_file, "%s%s", pStr, pLF );
                if ( str_LineEnd( szTag1, 0, nStrLen, &bOverflow, pStr, ind, bPlainTextTags ) )
                inchi_ios_print( out_file, "%s%s", pStr, pLF );
                tot_len = PrintXmlStartTag( pStr, ind, 3, szTag1,
                inchi_ios_print( out_file, "%s\n", pStr );
                str_LineStart( szTag1, NULL, 0, pStr, ind );
                inchi_ios_print( out_file, "%s\n", pStr );
                pStr[tot_len = 0] = '\0';
                tot_len = str_LineStart( szTag2, NULL, 0, pStr, ind );
                tot_len = str_AuxIsoNumb(pCG, pINChISort, pINChISort2, pStr, nStrLen, tot_len,
                if ( str_LineEnd( szTag2, tot_len, nStrLen, &bOverflow, pStr, bXml? 0 : -1, bPlainTextTags ) )
                inchi_ios_print( out_file, "%s%s", pStr, pLF );
                tot_len = str_LineStart( szTag2, NULL, 0, pStr, ind );
                tot_len = str_AuxIsoEqu(pINChISort, pINChISort2, pStr, nStrLen, tot_len,
                if ( str_LineEnd( szTag2, tot_len, nStrLen, &bOverflow, pStr, bXml? 0 : -2/*was -1: Fix15*/, bPlainTextTags ) )
                inchi_ios_print( out_file, "%s%s", pStr, pLF );
                tot_len = str_LineStart( szTag2, NULL, 0, pStr, ind );
                tot_len = str_AuxIsoTgroupEqu(pINChISort, pStr, nStrLen, tot_len,
                if ( str_LineEnd( szTag2, tot_len, nStrLen, &bOverflow, pStr, bXml? 0 : -2/*was -1: Fix15*/, bPlainTextTags ) )
                inchi_ios_print( out_file, "%s%s", pStr, pLF );
                    str_LineStart( szTag2, NULL, 0, pStr, ind );
                    inchi_ios_print( out_file, "%s\n", pStr );
                tot_len = str_LineStart( szTag3, NULL, 0, pStr, ind );
                tot_len = str_AuxInvIsoSp3(pINChISort, pINChISort2, pStr, nStrLen, tot_len,
                if ( str_LineEnd( szTag3, tot_len, nStrLen, &bOverflow, pStr, bXml? 0 : -1, bPlainTextTags ) )
                inchi_ios_print( out_file, "%s", pStr );
                    tot_len = str_LineStart( szTag3, NULL, 0, pStr, ind );
                                                    pStr, nStrLen, tot_len,
                    if ( str_LineEnd( szTag3, tot_len, nStrLen, &bOverflow, pStr, bXml? 0 : -1, bPlainTextTags ) )
                    inchi_ios_print( out_file, "%s%s", pStr, pLF );
                    if ( str_LineEnd( szTag2, 0, nStrLen, &bOverflow, pStr, ind, bPlainTextTags ) )
                    inchi_ios_print( out_file, "%s", pStr );
                    tot_len = PrintXmlStartTag( pStr, ind, 3, szTag1,
                    inchi_ios_print( out_file, "%s\n", pStr );
                if ( str_LineEnd( szTag1, 0, nStrLen, &bOverflow, pStr, ind, bPlainTextTags ) )
                inchi_ios_print( out_file, "%s", pStr );
                tot_len = str_LineStart( tag=x_aux_trans, NULL, 0, pStr, ind );
                tot_len = str_AuxTautTrans(nTrans_n, nTrans_s, pStr, nStrLen, tot_len,
                if ( str_LineEnd( bXml? tag:p_aux_at_inv_nbr, tot_len, nStrLen, &bOverflow, pStr, bXml? 0 : -1, bPlainTextTags ) )
                inchi_ios_print( out_file, "%s", pStr );
                str_LineStart( szTag1, NULL, 0, pStr, ind );
                inchi_ios_print( out_file, "%s\n", pStr );
                pStr[tot_len=0] = '\0';
                    if ( str_LineEnd( szTag1, 0, nStrLen, &bOverflow, pStr, ind, bPlainTextTags ) )
                    inchi_ios_print( out_file, "%s", pStr );
            tot_len = str_LineStart( szTag1, NULL, 0, pStr, ind );
            tot_len = str_AuxChargeRadVal(pINChISort, pStr, nStrLen, tot_len,
            if ( str_LineEnd( szTag1, tot_len, nStrLen, &bOverflow, pStr, bXml? 0 : -1, bPlainTextTags ) )
            inchi_ios_print( out_file, "%s%s", pStr, pLF );
                str_LineStart( szTag1, NULL, 0, pStr, ind );
                inchi_ios_print( out_file, "%s\n", pStr );
                str_LineStart( szTag2, NULL, 0, pStr, ind );
                inchi_ios_print( out_file, "%s\n", pStr );
                strcpy( pStr, SP(ind));
                pStr[tot_len = 0] = '\0';
                inchi_ios_print( out_file, "%s%s", szTag2, pStr );
                    memcpy( pStr + tot_len, p+cur_pos, last_pos - cur_pos );
                    pStr[tot_len + last_pos - cur_pos] = '\0';
                    inchi_ios_print( out_file, "%s%s", pStr, !bXml && bPlainTextTags? "" : "\n" );
                pStr[0] = '\0';
                if ( str_LineEnd( szTag2, 0, nMaxLineLen, &bOverflow, pStr, ind, bPlainTextTags ) )
                inchi_ios_print( out_file, "%s", pStr );
                str_LineStart( szTag2, NULL, 0, pStr, ind );
                inchi_ios_print( out_file, "%s\n", pStr );
                strcpy( pStr, SP(ind));
                pStr[tot_len = 0] = '\0';
                inchi_ios_print( out_file, "%s%s", szTag2, pStr );
                    memcpy( pStr + tot_len, p+cur_pos, last_pos - cur_pos );
                    pStr[tot_len + last_pos - cur_pos] = '\0';
                    inchi_ios_print( out_file, "%s%s", pStr, !bXml && bPlainTextTags? "" : "\n" );
                pStr[0] = '\0';
                if ( str_LineEnd( szTag2, 0, nMaxLineLen, &bOverflow, pStr, ind, bPlainTextTags ) )
                inchi_ios_print( out_file, "%s", pStr );
                str_LineStart( szTag2, NULL, 0, pStr, ind );
                inchi_ios_print( out_file, "%s\n", pStr );
                strcpy( pStr, SP(ind));
                pStr[tot_len = 0] = '\0';
                inchi_ios_print( out_file, "%s%s", szTag2, pStr );
                    memcpy( pStr + tot_len, p+cur_pos, last_pos - cur_pos );
                    pStr[tot_len + last_pos - cur_pos] = '\0';
                    inchi_ios_print( out_file, "%s%s", pStr, !bXml && bPlainTextTags? "" : "\n" );
                pStr[0] = '\0';
                if ( str_LineEnd( szTag2, 0, nMaxLineLen, &bOverflow, pStr, ind, bPlainTextTags ) )
                inchi_ios_print( out_file, "%s", pStr );
                if ( str_LineEnd( szTag1, 0, nStrLen, &bOverflow, pStr, ind, bPlainTextTags ) )
                inchi_ios_print( out_file, "%s", pStr );
            nRet = OutputINChI1( pCG, pStr, nStrLen, 
            if ( str_LineEnd( x_aux_basic, 0, nStrLen, &bOverflow, pStr, ind, bPlainTextTags ) )
            inchi_ios_print( out_file, "%s", pStr );
        strcpy( pStr, "Output buffer overflow");
            OutputINChIXmlError( out_file, pStr, nStrLen, ind /*, 0*/ /* err number */, pStr, _IS_FATAL );
            inchi_ios_print( out_file, "\nFATAL ERROR: %s\n", pStr );
		just resets buffer pStr (by placing '\0' into pStr[0] )
int str_LineStart( const char *tag, char *tag2, int val2, char *pStr, int ind )
            memset( pStr + tot_len, ' ', ind );
        strcpy( pStr + tot_len, x_line_opening );
        strcat( pStr + tot_len, tag );
            tot_len += (int) strlen(pStr + tot_len);
            tot_len += sprintf( pStr + tot_len, " %s=\"%d\"%s", tag2, val2, x_close_line );
            strcat( pStr + tot_len, x_close_line );
            tot_len += (int) strlen(pStr + tot_len);
        pStr[tot_len] = '\0';
int str_LineEnd( const char *tag, int tot_len, int nStrLen, int *bOverflow, char *pStr, int ind, int bPlainTextTags )
            tot_len += sprintf( pStr + tot_len, "%s%s%s%s\n", SP(ind), x_line_closing, tag, x_close_line );
        pStr[tot_len] = '\0'; /* add zero termination 2004-04-26 */
           (a) pStr has non-zero length, or
        if ( pStr[0] || ind < -1 ) {
                    memmove( pStr+tag_len, pStr, tot_len + 1 );
                    memcpy( pStr, tag, tag_len );
            strcpy( pStr, "/" );
                            AddErrorMessage(sd->pStrErrStruct, "Cannot find 0D stereobond neighbor");
                            AddErrorMessage(sd->pStrErrStruct, "Cannot find 0D stereobond neighbor");
